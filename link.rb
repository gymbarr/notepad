class Link < Post

  def initialize
    super # вызываем конструктор родителя

    # потом инициализируем специфичное для ссылки поле
    @url = ''
  end

  # Напишем реализацию метода read_from_console для экземпляра ссылки. Он
  # спрашивает у пользователя адрес ссылки и её описани, которые мы записываем
  # соответственно в переменны экземпляра @url и @text.
  def read_from_console
    # Спрашиваем у пользователя url ссылки и записываем в переменную @url
    puts 'Адрес ссылки (url):'
    @url = STDIN.gets.chomp

    # Спрашиваем у пользователя описание ссылки (одной строчки будет достаточно)
    puts 'Что за ссылка?'
    @text = STDIN.gets.chomp
  end

  # Этот метод возвращает состояние объекта в виде массива строк
  def to_strings
    time_string = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M:%S")} \n \n"

    deadline = "Крайний срок: #{@due_date}"

    [time_string, @text, @url]
  end

  # Метод возвращает ассоциативный массив с параметрами Задачи, который будем использовать для вставки в БД
  def to_db_hash
    # вызываем родительский метод ключевым словом super и к хэшу, который он вернул
    # присоединяем прицепом специфичные для этого класса поля методом Hash#merge
    super.merge(
      {
        'text' => @text,
        'url' => @url
      }
    )
  end

  #  получает на вход хэш массив данных и должен заполнить свои поля
  def load_data(data_hash)
    super(data_hash) # дергаем родительский метод для инициализации общих полей

    #  теперь прописываем свое специфичное поле
    @text = data_hash['text'].split('\n')
    @url = data_hash['url']
  end
end
