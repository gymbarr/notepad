# Подключим встроенный в руби класс Date для работы с датами
require 'date'

class Task < Post

  def initialize
    # Вызовем одноимённый метод (initialize) родителя (Post) методом super
    super

    # А потом добавим то, что будет отличаться у ребёнка — поле @due_date
    @due_date = ''
  end

  # Напишем реализацию метода read_from_console для экземпляра задачи. Он
  # спрашивает у пользователя текст задачи (что нужно сделать) и дату, до
  # которой нужно успеть это сделать.
  def read_from_console
    # Спросим у пользователя, что нужно сделать и запишем его ответ (строку) в
    # переменную экземпляра класса Задача @text.
    puts 'Что надо сделать?'
    @text = STDIN.gets.chomp

    # Спросим у пользователя, до какого числа ему нужно выполнить задачу и
    # подскажем формат, в котором нужно вводить дату. А потом запишем его ответ
    # в локальную переменную input.
    puts 'К какому числу? Укажите дату в формате ДД.ММ.ГГГГ, ' \
      'например 12.05.2003'
    input = STDIN.gets.chomp

    # Для того, чтобы из строки получить объект класса Date, с которым очень
    # удобно работать (например, можно вычислить, сколько осталось дней до
    # нужной даты), мы получим этот объект из строки с помощью метода класса
    # Date (статического метода).
    @due_date = Date.parse(input)
  end

  # Этот метод возвращает состояние объекта в виде массива строк
  def to_strings
    time_string = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M:%S")} \n \n"

    deadline = "Крайний срок: #{@due_date}"

    [time_string, @text, deadline]
  end

  # Метод возвращает ассоциативный массив с параметрами Задачи, который будем использовать для вставки в БД
  def to_db_hash
    # вызываем родительский метод ключевым словом super и к хэшу, который он вернул
    # присоединяем прицепом специфичные для этого класса поля методом Hash#merge
    super.merge(
      {
        'text' => @text,
        'due_date' => @due_date.to_s
      }
    )
  end

  #  получает на вход хэш массив данных и должен заполнить свои поля
  def load_data(data_hash)
    super(data_hash) # дергаем родительский метод для инициализации общих полей

    #  теперь прописываем свое специфичное поле
    @text = data_hash['text']
    @due_date = Date.parse(data_hash['due_date'])
  end
end
